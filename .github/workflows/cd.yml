name: cd

on:
  push:
    tags:
      - "v**"

jobs:
  aws:
    name: AWS
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials using Secrets
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Test AWS CLI
        run: |
          echo "Testing AWS CLI configuration..."
          aws sts get-caller-identity
          echo "AWS CLI is working!"

          echo "Testing ECS permissions..."
          aws ecs list-clusters --max-items 5
          echo "ECS permissions are working!"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPO: fragments
          VERSION_TAG: ${{ github.ref_name }}
        uses: docker/build-push-action@v6
        with:
          context: ./fragments-backend
          file: ./fragments-backend/Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.VERSION_TAG }}, ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest

      - name: Update ECS task definition with new image
        run: |
          # Get the ECR image URI
          ECR_IMAGE="${{ steps.login-ecr.outputs.registry }}/fragments:${{ github.ref_name }}"

          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "ECR Image: $ECR_IMAGE"

          # Update the task definition file with the new image
          sed -i "s|image:.*|image: \"$ECR_IMAGE\"|" fragments-backend/ecs-task-definition.json

          echo "Updated task definition file:"
          cat fragments-backend/ecs-task-definition.json

          # Register the new task definition
          echo "Registering task definition with image: $ECR_IMAGE"
          aws ecs register-task-definition --cli-input-json file://fragments-backend/ecs-task-definition.json

          echo "Task definition registered successfully!"

          # Wait a moment for the task definition to be fully available
          echo "Waiting for task definition to be available..."
          sleep 10

      - name: Check and create ECS cluster if needed
        run: |
          echo "Checking ECS cluster status..."
          # Check if cluster exists
          if ! aws ecs describe-clusters --clusters fragments --query 'clusters[0].status' --output text 2>/dev/null | grep -q ACTIVE; then
            echo "Creating ECS cluster 'fragments'..."
            aws ecs create-cluster --cluster-name fragments
            echo "Cluster created successfully!"
          else
            echo "ECS cluster 'fragments' already exists"
          fi

          # Show cluster details
          echo "Cluster details:"
          aws ecs describe-clusters --clusters fragments

      - name: Run ECS task directly
        run: |
          echo "Creating ECS service with Application Load Balancer..."

                    # Get the latest task definition ARN by family name (latest revision)
          echo "Getting latest task definition ARN..."
          TASK_DEF_ARN=$(aws ecs describe-task-definition \
            --task-definition fragments \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          if [ -z "$TASK_DEF_ARN" ] || [ "$TASK_DEF_ARN" = "None" ]; then
            echo "ERROR: Could not retrieve task definition ARN"
            echo "Available task definitions:"
            aws ecs list-task-definitions --family-prefix fragments
            exit 1
          fi

          echo "Using task definition: $TASK_DEF_ARN"

          # Discover available VPC, subnets, and security groups
          echo "Discovering available VPC resources..."

          # Get default VPC
          VPC_ID=$(aws ec2 describe-vpcs \
            --filters "Name=is-default,Values=true" \
            --query 'Vpcs[0].VpcId' \
            --output text)

          if [ "$VPC_ID" = "None" ] || [ -z "$VPC_ID" ]; then
            echo "No default VPC found, trying to get first available VPC..."
            VPC_ID=$(aws ec2 describe-vpcs \
              --query 'Vpcs[0].VpcId' \
              --output text)
          fi

          echo "Using VPC: $VPC_ID"

          # Get public subnets in the VPC
          SUBNET_IDS=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=$VPC_ID" "Name=map-public-ip-on-launch,Values=true" \
            --query 'Subnets[*].SubnetId' \
            --output text | head -n 2 | tr '\n' ' ')

          if [ -z "$SUBNET_IDS" ]; then
            echo "No public subnets found, getting all subnets..."
            SUBNET_IDS=$(aws ec2 describe-subnets \
              --filters "Name=vpc-id,Values=$VPC_ID" \
              --query 'Subnets[*].SubnetId' \
              --output text | head -n 2 | tr '\n' ' ')
          fi

          echo "Using subnets: $SUBNET_IDS"

          # Get or create security group
          SG_NAME="fragments-sg"
          SG_ID=$(aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=$SG_NAME" "Name=vpc-id,Values=$VPC_ID" \
            --query 'SecurityGroups[0].GroupId' \
            --output text)

          if [ "$SG_ID" = "None" ] || [ -z "$SG_ID" ]; then
            echo "Creating security group: $SG_NAME"
            SG_ID=$(aws ec2 create-security-group \
              --group-name $SG_NAME \
              --description "Security group for fragments ECS service" \
              --vpc-id $VPC_ID \
              --query 'GroupId' \
              --output text)
            
            # Add inbound rule for HTTP
            aws ec2 authorize-security-group-ingress \
              --group-id $SG_ID \
              --protocol tcp \
              --port 8080 \
              --cidr 0.0.0.0/0
              
            echo "Security group created: $SG_ID"
          else
            echo "Using existing security group: $SG_ID"
          fi

          # Create Application Load Balancer
          echo "Creating Application Load Balancer..."
          ALB_ARN=$(aws elbv2 create-load-balancer \
            --name fragments-alb \
            --subnets $SUBNET_IDS \
            --security-groups $SG_ID \
            --scheme internet-facing \
            --type application \
            --query 'LoadBalancers[0].LoadBalancerArn' \
            --output text 2>/dev/null || echo "ALB creation failed")

          if [ "$ALB_ARN" != "ALB creation failed" ]; then
            echo "ALB created: $ALB_ARN"
            
            # Create target group
            echo "Creating target group..."
            TG_ARN=$(aws elbv2 create-target-group \
              --name fragments-tg \
              --protocol HTTP \
              --port 8080 \
              --vpc-id $VPC_ID \
              --target-type ip \
              --query 'TargetGroups[0].TargetGroupArn' \
              --output text 2>/dev/null || echo "TG creation failed")
            
            if [ "$TG_ARN" != "TG creation failed" ]; then
              echo "Target group created: $TG_ARN"
              
              # Create ECS service with ALB
              echo "Creating ECS service with ALB..."
              aws ecs create-service \
                --cluster fragments \
                --service-name fragments \
                --task-definition $TASK_DEF_ARN \
                --desired-count 1 \
                --launch-type FARGATE \
                --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
                --load-balancers "targetGroupArn=$TG_ARN,containerName=fragments,containerPort=8080" \
                || echo "Service creation failed"
            else
              echo "Target group creation failed"
            fi
          else
            echo "ALB creation failed - using fallback approach"
            
            # Fallback: just run the task
            echo "Starting ECS task directly..."
            aws ecs run-task \
              --cluster fragments \
              --task-definition $TASK_DEF_ARN \
              --launch-type FARGATE \
              --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_IDS],securityGroups=[$SG_ID],assignPublicIp=ENABLED}" \
              || echo "Task start failed - but task definition was created successfully!"
          fi

          echo "ECS deployment completed!"

          # Show running tasks
          echo "Current running tasks:"
          aws ecs list-tasks --cluster fragments

          # Get Load Balancer URL if ALB was created
          if [ "$ALB_ARN" != "ALB creation failed" ] && [ -n "$ALB_ARN" ]; then
            echo "Getting Load Balancer URL..."
            ALB_DNS=$(aws elbv2 describe-load-balancers \
              --load-balancer-arns $ALB_ARN \
              --query 'LoadBalancers[0].DNSName' \
              --output text)
            
            echo "=========================================="
            echo "üéâ ECS Deployment Successful! üéâ"
            echo "=========================================="
            echo "Load Balancer URL: http://$ALB_DNS:8080"
            echo "Use this URL in your fragments-ui configuration"
            echo "=========================================="
          else
            echo "=========================================="
            echo "‚ö†Ô∏è  ECS Task Started (No Load Balancer) ‚ö†Ô∏è"
            echo "=========================================="
            echo "Task definition created and registered successfully"
            echo "ECS task started directly (no ALB integration)"
            echo "=========================================="
          fi
